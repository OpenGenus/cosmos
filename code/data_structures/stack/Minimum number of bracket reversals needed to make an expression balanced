#include<bits/stdc++.h>
using namespace std ;
 
 
// Returns count of minimum reversals for making expression balanced. Returns -1 if expression cannot be balanced.
//Time complexity - O(n), Auxillary space - O(n)
int countMinReversals(string expr)
{
    int len = expr.length();
 
    // length of expression must be even to make it balanced by using reversals.
    if (len%2)
       return -1;
 
    // After this loop, stack contains unbalanced part of expression.
    stack<char> s;
    for (int i=0; i<len; i++)
    {
        if (expr[i]=='}' && !s.empty())
        {
            if (s.top()=='{')
                s.pop();
            else
                s.push(expr[i]);
        }
        else
            s.push(expr[i]);
    }
 
    // Length of the reduced expression reduced_len = (m+n)
    int reduced_len = s.size();
 
    // count opening brackets at the end of stack
    int n = 0;
    while (!s.empty() && s.top() == '{')
    {
        s.pop();
        n++;
    }
 
    // return ceil(m/2) + ceil(n/2) which is actually equal to (m+n)/2 + n%2 when m+n is even.
    return (reduced_len/2 + n%2);
}
 
int main()
{
   string expression;
   cin >> expression;
   cout << countMinReversals(expression);
   return 0;
}
